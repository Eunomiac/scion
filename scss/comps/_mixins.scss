
/* #region @FUNCTIONS */
@function sliceList($list, $start, $end: null) {
  @if ($end == null) {
    $end: length($list);
  }
  $newList: ();
  @for $i from $start through $end {
    $newList: join($newList, nth($list, $i));
  }
  @return $newList;
}
/* #endregion */

/* #region @MIXINS */
@mixin element-invisible {
  position: absolute;

  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;

  clip: rect(0 0 0 0);
  overflow: hidden;
}

@mixin hide {
  display: none;
}

@mixin disabledText {
  color: var(--grey3);
  font: {
    family: "Della Respira";
    style: italic;
  }
  text-shadow: none;
}

@mixin on-circle($item-count, $inner-circle-size, $outer-circle-size, $item-size, $initial-rotation) {
  position: relative;
  width:  $outer-circle-size;
  height: $outer-circle-size;
  top: -($outer-circle-size - $inner-circle-size)/2;
  left: -($outer-circle-size - $inner-circle-size)/2;
  padding: 0;
  border-radius: 50%; 
  list-style: none;       
  
  > * {
    display: block;
    position: absolute;
    top:  50%; 
    left: 50%;
    width:  $item-size;
    height: $item-size;
    margin: -($item-size / 2);
  
    $angle: (360 / $item-count);
    $rot: $initial-rotation;

    @for $i from 1 through $item-count {
      &:nth-of-type(#{$i}) {
        transform: 
          rotate($rot * 1deg) 
          translate($outer-circle-size / 2) 
          rotate($rot * -1deg);
      }

      $rot: $rot + $angle;
    }
  }
}

@mixin text-shadow($shadows: (3 0 0 0 $c-black), $propertyName: text-shadow) {
  @if (length(nth($shadows, 1)) == 1) {
    $shadows: join([$shadows], (), $separator: comma);
  }
  $fullShadow: ();
  @each $shadow in $shadows {
    $numRepeats: 1;
    @if (length($shadow) == 5) {
      $numRepeats: nth($shadow, 1);
      $shadow: sliceList($shadow, 2);
    }
    @if (length($shadow) > 0) {
      @for $i from 1 through $numRepeats {
        $fullShadow: append($fullShadow, $shadow, $separator: comma);
      }
    }
  }
  #{$propertyName}: $fullShadow;
}

@mixin embossed-text($distance: 1px, $blur: 0px, $colorBright: var(--greyFade10), $colorDark: var(--greyFade0), $propertyName: text-shadow) {
  $shadowBright: #{$distance * -1} #{$distance * -1} #{$blur} #{$colorBright};
  $shadowDark: #{$distance} #{$distance} #{$blur} #{$colorDark};
  #{$propertyName}: join(#{$shadowBright}, #{$shadowDark}, $separator: comma);
}

@mixin box-shadow($distance: 0px, $size: 5px, $color: $c-black, $isInset: false) {
    $shadowPart: $distance $distance $size $color;
    @if $isInset { $shadowPart: inset $shadowPart; }
    $shadowFull: ();
    @for $i from 1 through 3 {
      $shadowFull: append($shadowFull, $shadowPart, $separator: comma); 
    }
    box-shadow: $shadowFull;
}

@mixin bg-shade($color: $c-black) {
    background-color: scale-color($color, $alpha: -80%);
}

@mixin set-colors() {
  @include scaled-colors($accentColor);

  --bgMatte: #{$matteColor}; 
  --shadowColorBright: #{scale-color($highlightColor, $alpha: -50%)};
  --shadowColorDark: #{scale-color($shadowColor, $alpha: -50%)};

  --fontColorTitle: #{$titleColor};
  --bgTitle: #{$titleBG};

  --fontColorBody: #{$bodyColor};  
  
  --fontColorHeading1: #{$headingColor1};
  --bgHeading1: #{$headingBG1};
  
  --fontColorHeading2: #{$headingColor2};
  --bgHeading2: #{$headingBG2};

  --fontColorHeading3: #{$headingColor3};
  --bgHeading3: #{$headingBG3};
}

@mixin set-typography($fontMap: ()) {
  $defaultFontMap: (body: $fontFamilyBody, title: $fontFamilyTitle, h1: $fontFamilyHeading1, h2: $fontFamilyHeading2, h3: $fontFamilyHeading3);
  $mergedFontMap: map-merge($defaultFontMap, $fontMap);
  
  $fontBody: map-get($mergedFontMap, body);
  $fontTitle: map-get($mergedFontMap, title);
  $fontHeading1: map-get($mergedFontMap, h1);
  $fontHeading2: map-get($mergedFontMap, h2);
  $fontHeading3: map-get($mergedFontMap, h3);
  --fontFamilyTitle: "#{$fontTitle}";
  --fontFamilyBody: "#{$fontBody}";
  --fontFamilyHeading1: "#{$fontHeading1}";
  --fontFamilyHeading2: "#{$fontHeading2}";
  --fontFamilyHeading3: "#{$fontHeading3}";
}
// #endregion