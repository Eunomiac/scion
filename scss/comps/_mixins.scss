


/* #region @MIXINS */
@mixin element-invisible {
  position: absolute;

  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;

  clip: rect(0 0 0 0);
  overflow: hidden;
}

@mixin placeholderText {
  color: var(--colorPlaceholder);
  font: {
    family: var(--fontFamilyPlaceholder);
    size: var(--fontSizePlaceholder);
    style: var(--fontStylePlaceholder);
    variant: var(--fontVariantPlaceholder);
    weight: var(--fontWeightPlaceholder);
  }
  line-height: var(--lineHeightPlaceholder);
  text: {
    transform: var(--textTransformPlaceholder);
    indent: var(--textIndentPlaceholder);
    shadow: var(--textShadowPlaceholder);
  }
}

@mixin on-circle($item-count, $inner-circle-size, $outer-circle-size, $item-size, $initial-rotation) {
  position: relative;
  width:  $outer-circle-size;
  height: $outer-circle-size;
  top: -($outer-circle-size - $inner-circle-size)/2;
  left: -($outer-circle-size - $inner-circle-size)/2;
  padding: 0;
  border-radius: 50%; 
  list-style: none;       
  
  > * {
    display: block;
    position: absolute;
    top:  50%; 
    left: 50%;
    width:  $item-size;
    height: $item-size;
    margin: -($item-size / 2);
  
    $angle: (360 / $item-count);
    $rot: $initial-rotation;

    @for $i from 1 through $item-count {
      &:nth-of-type(#{$i}) {
        transform: 
          rotate($rot * 1deg) 
          translate($outer-circle-size / 2) 
          rotate($rot * -1deg);
      }

      $rot: $rot + $angle;
    }
  }
}

@mixin text-shadow($shadows: (3 0 0 0 $c-black), $propertyName: text-shadow) {
  @if (length(nth($shadows, 1)) == 1) {
    $shadows: join([$shadows], (), $separator: comma);
  }
  $fullShadow: ();
  @each $shadow in $shadows {
    $numRepeats: 1;
    @if (length($shadow) == 5) {
      $numRepeats: nth($shadow, 1);
      $shadow: sliceList($shadow, 2);
    }
    @if (length($shadow) > 0) {
      @for $i from 1 through $numRepeats {
        $fullShadow: append($fullShadow, $shadow, $separator: comma);
      }
    }
  }
  #{$propertyName}: $fullShadow;
}

@mixin embossed-text($distance: 1px, $blur: 0px, $colorBright: var(--greyFade10), $colorDark: var(--greyFade0), $propertyName: text-shadow) {
  $shadowBright: #{$distance * -1} #{$distance * -1} #{$blur} #{$colorBright};
  $shadowDark: #{$distance} #{$distance} #{$blur} #{$colorDark};
  #{$propertyName}: join(#{$shadowBright}, #{$shadowDark}, $separator: comma);
}

@mixin box-shadow($distance: 0px, $size: 5px, $color: $c-black, $isInset: false, $repeats: 3) {
    $shadowPart: $distance $distance $size $color;
    @if $isInset { $shadowPart: inset $shadowPart; }
    $shadowFull: ();
    @for $i from 1 through $repeats {
      $shadowFull: append($shadowFull, $shadowPart, $separator: comma); 
    }
    box-shadow: $shadowFull;
}

@mixin bg-shade($color: $c-black) {
    background-color: scale-color($color, $alpha: -80%);
}

@mixin bg-stoneTablet() {
  
  background: {
    image: var(--bgItemSheet);
    size: 100% 100%;
    position: center;
    repeat: no-repeat;
  }
  &::after {
    content: "";
    position: absolute;
    pointer-events: none;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background: {
        image: var(--bgItemOverlay);
        size: 100% 100%;
        position: center;
        repeat: no-repeat;
    }      
  }
}
// #endregion