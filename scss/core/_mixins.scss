

/* General-Purpose Mixins */
@mixin element-invisible {
    position: absolute;
    overflow: hidden;

    width: 1px;
    height: 1px;
    padding: 0;
    border: 0;
    margin: -1px;

    clip: rect(0 0 0 0);
}
@mixin placeholderText {
    color: var(--colorPlaceholder);
    font: {
        family: var(--fontFamilyPlaceholder);
        size: var(--fontSizePlaceholder);
        style: var(--fontStylePlaceholder);
        variant: var(--fontVariantPlaceholder);
        weight: var(--fontWeightPlaceholder);
    }
    // line-height: var(--lineHeightPlaceholder);
    text: {
        indent: var(--textIndentPlaceholder);
        shadow: var(--textShadowPlaceholder);
        transform: var(--textTransformPlaceholder);
    }
}
@mixin repeat($rep-val, $rep-count, $propertyName, $delim: comma) {
    $propList: ();
    @for $i from 1 through $rep-count {
        $propList: append($propList, $rep-val, $separator: #{$delim});
    }
    #{$propertyName}: $propList;

} 
@mixin on-circle($item-count, $inner-circle-size, $outer-circle-size, $item-size, $initial-rotation) {
    position: relative;
    top: -($outer-circle-size - $inner-circle-size)/2;
    left: -($outer-circle-size - $inner-circle-size)/2;
    width: $outer-circle-size;
    height: $outer-circle-size;
    padding: 0;
    border-radius: 50%;
    list-style: none;

    > * {
        position: absolute;
        top: 50%;
        left: 50%;
        display: block;
        width: $item-size;
        height: $item-size;
        margin: -($item-size / 2);

        $angle: (360 / $item-count);
        $rot: $initial-rotation;

        @for $i from 1 through $item-count {
            &:nth-of-type(#{$i}) {
                transform: 
                    rotate($rot * 1deg) 
                    translate($outer-circle-size / 2) 
                    rotate($rot * -1deg);
            }

            $rot: $rot + $angle;
        }
    }
}
@mixin text-shadow($shadows: (3 0 0 0 $c-black), $propertyName: text-shadow) {
    @if (length(nth($shadows, 1)) == 1) {
        $shadows: join([$shadows], (), $separator: comma);
    }
    $fullShadow: ();
    @each $shadow in $shadows {
        $numRepeats: 1;
        @if (length($shadow) == 5) {
            $numRepeats: nth($shadow, 1);
            $shadow: sliceList($shadow, 2);
        }
        @if (length($shadow) > 0) {
            @for $i from 1 through $numRepeats {
                $fullShadow: append($fullShadow, $shadow, $separator: comma);
            }
        }
    }
    #{$propertyName}: $fullShadow;
}
@mixin embossed-text($distance: 1px, $blur: 0, $colorBright: var(--white), $colorDark: var(--black), $propertyName: text-shadow) {
    $shadowBright: #{$distance * -1} #{$distance * -1} #{$blur} #{$colorBright};
    $shadowDark: #{$distance} #{$distance} #{$blur} #{$colorDark};
    #{$propertyName}: join(#{$shadowBright}, #{$shadowDark}, $separator: comma);
}
@mixin box-shadow($distance: 0, $size: 5px, $color: $c-black, $isInset: false, $repeats: 3) {
    $shadowPart: $distance $distance $size $color;
    @if $isInset { $shadowPart: inset $shadowPart; }
    $shadowFull: ();
    @for $i from 1 through $repeats {
        $shadowFull: append($shadowFull, $shadowPart, $separator: comma); 
    }
    box-shadow: $shadowFull;
}
@mixin bg-shade($color: $c-black) {
    background-color: scale-color($color, $alpha: -80%);
}
@mixin bg-stoneTablet() {
    background: {
        position: center;
        image: var(--bgItemSheet);
        repeat: no-repeat;
        size: 100% 100%;
    }

    &::after {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        content: '';
        pointer-events: none;
        background: {
            position: center;
            image: var(--bgItemOverlay);
            repeat: no-repeat;
            size: 100% 100%;
        }      
    }
}
@mixin bubble($bubbleSize: 6, $bubbleHeight: 24px, $bubbleMargin: 4px) {
    $sizeRatio: $bubbleHeight / 100px; // Raw Image Height = 100px.
    $paddingLookup: (
        2: 12px,
        3: 12px,
        4: 14px,
        5: 14px,
        6: 16px,
        8: 16px,
        10: 16px
    );
    $indentLookup: (
        2: 112px,
        3: 212px,
        4: 292px,
        5: 392px,
        6: 446px,
        8: 646px,
        10: 846px
    );
 
    $bubbleWidth: $bubbleSize * (100px * $sizeRatio);
    $vertPad: 12px * $sizeRatio;
    $horizPad: map-get($paddingLookup, $bubbleSize) * $sizeRatio;
    $vertMarginTitle: $bubbleHeight * 0.05;
 
    $innerHeight: $bubbleHeight - (2 * $vertPad);
    $innerWidth: $bubbleWidth - (2 * $horizPad);
 
    $middleWidth: map-get($indentLookup, $bubbleSize) * $sizeRatio;
    $topIndent: ($innerWidth - $middleWidth) / 2;
    $bgImage: url('../images/bubbles/Bubble1x#{$bubbleSize}.png');
    
    width: $innerWidth;
 
    height: $innerHeight;
    box-sizing: content-box;
    padding: $vertPad $horizPad;
    margin: $bubbleMargin;
    text-align: center;
 
    background: {
        image: $bgImage;
        origin: border-box;
        repeat: no-repeat;
        size: 100% 100%;
    }
    // filter: drop-shadow(3px 3px 1px rgba(0, 0, 0, 0.5)); 
     
    .bubbleWrap::before {
        width: $topIndent;
        height: $innerHeight;
        content: '';
        float: left;
        shape-outside: polygon(0% 100%,
        0% 0%,
        100% 0%,
        0% 50%,
        100% 100%);
    }    
      
    &::before {
        width: $topIndent;
        height: $innerHeight;
        content: '';
        float: right;
        shape-outside: polygon(100% 100%, 100% 0%, 0% 0%, 100% 50%, 0% 100%);
    }
     
    span,
    p {
        display: block;
        text: {
            align: center;
            align-last: center;
        }
    }

    .bubbleTitle {
        display: block;
        grid-area: title;
        text: {
            align: center;
            align-last: center;
        }
    }
}
/* #endregion */
