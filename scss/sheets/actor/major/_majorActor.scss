form.editable {
    .menuRosette {        
        $menuOpenSize: 200px;
        $menuButtonCircleSize: $menuOpenSize * 1.25;
        $menuButtonFullSize: 120px;
        $menuButtonMargin: -20px;
        $numButtons: 5;
        $numButtonsMod: 5;
        
        $iconMain: url('../images/actor-sheet/menu/IconMain.png');
        $iconChargen: url('../images/actor-sheet/menu/IconChargen.png');
        $iconExperience: url('../images/actor-sheet/menu/IconExperience.png');
        $iconSettings: url('../images/actor-sheet/menu/IconSettings.png');
        $iconHeritage: url('../images/actor-sheet/menu/IconHeritage.png');
        
        $menuButtonSize: $menuButtonFullSize + $menuButtonMargin;

        position: absolute;
        z-index: 2;
        top: -65px;
        left: -65px;
        display: block;
        width: $menuOpenSize;
        height: $menuOpenSize;
        border: none;

        border-radius: 50%;

        content: '';
        grid-area: menu;
        pointer-events: all;
        transition: 0.5s;

        background: {
            position: center;
            image: var(--menuImage);
            repeat: no-repeat;
            size: 50%;
        }

        &:not(.collapsed):hover {
            background-size: 100%;
    
            div.circleMenuContainer {
                opacity: 1;
                transform: scale(1) rotate(0deg);
            }
        }

        .menuText {
            position: relative;
            display: block !important;
            width: $menuButtonSize * 2 !important;
            height: auto !important;
            
            color: var(--colorMenuGlow);
            letter-spacing: 10px;

            opacity: 0;
            pointer-events: none;
            transform: scale(2);
            transition: 0.25s !important;
            margin: {
                top: -20px;
                left: $menuButtonSize / -2 !important;
            }
            font: {
                family: var(--fontFamilyMenu);
                size: var(--fontSizeMenu);
                weight: bold;
            }
            text: {
                align: center;
                shadow: -1px -1px 2px #000, 1px -1px 2px #000, -1px 1px 2px #000, 1px 1px 2px #000;
                transform: uppercase;
            }
        }
    
        div.circleMenuContainer {
            @include on-circle(
                $item-count: 8,
                $inner-circle-size: $menuOpenSize,
                $outer-circle-size: $menuButtonCircleSize,
                $item-size: $menuButtonSize,
                $initial-rotation: 135
            );
            opacity: 0;
            transform: scale(0.3) rotate(-125deg);
            transition: 0.5s;
    
            .menuButtonContainer {
                @for $i from 1 through $numButtons {
                    &:nth-child(#{$i}) > .menuButton {
                        animation-delay: $i * 1s / $numButtons;
                    }
                }

                div,
                a {
                    display: inline-block;
                    width: 100%;
                    height: 100%;
                    transition: 0.5s;
                    background: {
                        position: center;
                        size: 100%;
                    }
                }

                .menuButton {
                    position: relative;
                    display: inline-block;
                    width: 100%;
                    height: 100%;
                    animation: slowBob 2s cubic-bezier(0.36, 0, 0.63, 1) infinite alternate;
                    transition: 0.5s;
        
                    @keyframes slowBob {
                        from { top: 0; }
                        to { top: 10px; }
                    }

                    &:hover { transform: scale(1.2); }
        
                    .menuIcon {
                        &.iconMain { background-image: $iconMain; }
                        &.iconChargen { background-image: $iconChargen; }
                        &.iconSettings { background-image: $iconSettings; }
                        &.iconExperience { background-image: $iconExperience; }
                        &.iconHeritage { background-image: $iconHeritage; }
                        
                        &:hover { /* filter: drop-shadow(0 0 10px var(--colorMenuGlow)) drop-shadow(0 0 10px var(--colorMenuGlow)) drop-shadow(0 0 10px var(--colorMenuGlow)); */ }

                        &:hover + .menuText {
                            letter-spacing: normal;
                            opacity: 1;
                            transform: scale(1);
                        }
                    }
                }
            }
        }
    }

    section#characterSheet {
        width: 100%;
        height: 100%;
        padding: 40px 60px 60px 40px;

        grid: 'header' 90px
            'body' 560px;

        opacity: 1;
        perspective: 100px;
        transform: scale(1, 1) rotate3d(1, -1, 0, 0deg);

        transform-origin: 50px 50px;

        transition: {
            delay: 0s;
            duration: 0.5s;
            property: transform, perspective;
            timing-function: ease;
        }

        &.collapsed {
            perspective: 1000px;
            transform: scale3d(0.5, 0.5, 0.5) rotate3d(1, -1, 0, -70deg);
            transform: scale(0, 0) rotate3d(1, -1, 0, 90deg);
        }
        
        background: {
            color: transparent;
            image: var(--bgActorSheet);
            repeat: no-repeat;
            size: 100%;
        }

        @if $isTesting-layout {
            @if map-get($isTesting-display, 'sheetPadding') {
                background: {
                    color: white;
                    image: url('../images/actor-sheet/backgrounds/ActorSheetFrame-Padding.png');
                    repeat: no-repeat;
                    size: 100%;
                }
            } @else if map-get($isTesting-display, 'sheetFrame') {        
                background: {
                    color: white;
                    image: url('../images/actor-sheet/backgrounds/ActorSheetFrame.png');
                    repeat: no-repeat;
                    size: 100%;
                }
            }
            @if map-get($isTesting-display, 'sheetBorders') {
                @include box-shadow(2px, lime, true);

                > * { @include box-shadow(6px, orange, true);

                    > * { @include box-shadow(4px, cyan, true);
                        > * { @include box-shadow(2px, red, true); }
                    }
                }
            }    
            @if map-get($isTesting-display, 'sheetBGShade') {
                @include bg-shade(lime);

                > * { @include bg-shade(orange);

                    > * { @include bg-shade(cyan); 
                        > * { @include bg-shade(red); }
                    }
                }
            }
        }

        .header {
            grid: '. surTitle .' 24px
                '. title .' 50px
                'subTitle subTitle subTitle' 16px
                / 90px 470px 90px;
            grid-area: header;
            
            div { pointer-events: all; }

            .divineTitle { grid-area: surTitle; }
            .charName { grid-area: title; }
            .patronage { grid-area: subTitle; }
        }

        .sheet-body {
            grid-area: body;
            section.chargen-body { @import 'sheets/actor/major/majorActor-chargen'; }
            section.front-body { @import 'sheets/actor/major/majorActor-front'; }
        }
    }
}

// HOW TO TRIGGER A FUNCTION WHEN AN ANIMATION OR TRANSITION IS COMPLETE:
//
//    $( '.item' ).addClass( 'disappear' ).on( 'webkitAnimationEnd mozAnimationEnd oAnimationEnd oanimationend animationend', () => { $( this ).remove(); });
//        // The added "disappear" class contains either an animation or a transition, which starts immediately.
//        //    When the animation/transition is finished, the callback function removes the element.
