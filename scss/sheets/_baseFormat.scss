* {
    /* #region Element Default Styles */
    color: var(--colorBody);
    line-height: var(--lineHeightBody);
    font: {
        family: var(--fontFamilyBody);
        size: var(--fontSizeBody);
        style: var(--fontStyleBody);
        variant: var(--fontVariantBody);
        weight: var(--fontWeightBody);
    }
    text: {
        shadow: var(--textShadowBody);
        transform: var(--textTransformBody);
    }

    textarea,
    input[type='text'],
    select,
    .contentEditable {
        overflow: hidden;
        height: unset;
        box-sizing: content-box;
        padding: var(--paddingInput);
        border: var(--borderInput);
        margin: 0 4px;

        box-shadow: none;
        line-height: var(--lineHeightInput);
        outline: none;
        // max-height: var(--maxHeightInput);
        // min-height: var(--maxHeightInput);

        font: {
            family: var(--fontFamilyInput);
            size: var(--fontSizeInput);
            style: var(--fontStyleInput);
            variant: var(--fontVariantInput);
            weight: var(--fontWeightInput);
        }
        text: {
            indent: var(--textIndentInput);
            shadow: var(--textShadowInput);
            transform: var(--textTransformInput);
        }
        

        &:invalid { @include placeholderText; }
    }

    h1,
    h2,
    h3,
    .h1,
    .h2,
    .h3 { width: 100%;
        margin: 0; }

    h1,
    h2,
    .h1,
    .h2 { display: block;
        text-indent: 15px; }

    h1,
    .h1 {
        padding: var(--paddingH1);
        border-bottom: var(--borderH1);
        background: var(--bgH1);
        color: var(--colorH1);
        // max-height: var(--maxHeightH1);
        // min-height: var(--maxHeightH1);
        line-height: var(--lineHeightH1);
        font: {
            family: var(--fontFamilyH1);
            size: var(--fontSizeH1);
            style: var(--fontStyleH1);
            variant: var(--fontVariantH1);
            weight: var(--fontWeightH1);
        }
        text: {
            indent: var(--textIndentH1);
            shadow: var(--textShadowH1);
            transform: var(--textTransformH1);
        }
    }

    h2,
    .h2 {
        padding: var(--paddingH2);
        border-bottom: var(--borderH2);
        background: var(--bgH2);
        color: var(--colorH2);
        // max-height: var(--maxHeightH2);
        // min-height: var(--maxHeightH2);
        line-height: var(--lineHeightH2);
        font: {
            family: var(--fontFamilyH2);
            size: var(--fontSizeH2);
            style: var(--fontStyleH2);
            variant: var(--fontVariantH2);
            weight: var(--fontWeightH2);
        }
        text: {
            indent: var(--textIndentH2);
            shadow: var(--textShadowH2);
            transform: var(--textTransformH2);
        }
    }

    h3,
    .h3 {
        padding: var(--paddingH3);
        border-bottom: var(--borderH3);
        background: var(--bgH3);
        color: var(--colorH3);
        // max-height: var(--maxHeightH3);
        // min-height: var(--maxHeightH3);
        line-height: var(--lineHeightH3);
        font: {
            family: var(--fontFamilyH3);
            size: var(--fontSizeH3);
            style: var(--fontStyleH3);
            variant: var(--fontVariantH3);
            weight: var(--fontWeightH3);
        }
        text: {
            indent: var(--textIndentH3);
            shadow: var(--textShadowH3);
            transform: var(--textTransformH3);
        }
    }

    label {
        margin: 0 4px;
        font-size: var(--fontSizeBody);
    }

    /* HOW TO TRIGGER A FUNCTION WHEN AN ANIMATION OR TRANSITION IS COMPLETE:

        $( '.item' ).addClass( 'disappear' ).on( 'webkitAnimationEnd mozAnimationEnd oAnimationEnd oanimationend animationend', () => { $( this ).remove(); });
            // The added "disappear" class contains either an animation or a transition, which starts immediately.
            //    When the animation/transition is finished, the callback function removes the element.
    */

    /* #endregion */

    /* #region Single-Purpose Classes */
    .readonly {
        overflow: hidden !important;
        pointer-events: none !important;
        resize: none !important;
    }

    .insetFrame {
        border: inset 3px var(--accentUp1);
        border-radius: 1rem;
        background: var(--accentDown3Fade75);
        color: var(--colorBody);
        font: {
            family: var(--fontFamilyBody);
            size: var(--fontSizeBody);
            weight: var(--fontWeightBody);
        }
    }

    .outsetFrame {
        border: outset 3px var(--accentUp1);
        border-radius: 1rem;
        background: var(--accentUp3Fade75);
        color: var(--colorBody);
        font: {
            family: var(--fontFamilyBody);
            size: var(--fontSizeBody);
        }
    }

    .hidden { display: none !important; }

    .text {
        color: var(--colorBody) !important;
        font: { size: var(--fontSizeBody) !important; }
    }

    .inline { 
        display: inline-block !important;

        &.text { padding-right: $default-padding !important; } 
    }

    .padded { padding: $default-padding !important; }
    .padVert { padding: $default-padding 0 !important; }

    .placeholder { @include placeholderText; }

    .greyText { color: var(--grey) !important; }

    .scionText {
        color: var(--greyDown2);
        font-family: 'Benguiat';
        font-weight: bold;
        text-shadow: var(--textShadowTitle);
        text-transform: uppercase;
    }

    .noBG { background: none !important; }
    .noBorder { border: none !important; }

    .alignLeft { text-align: left !important;
        text-align-last: left !important; }

    .alignCenter { text-align: center !important;
        text-align-last: center !important;
        text-indent: 0 !important; }

    .alignRight { text-align: right !important;
        text-align-last: right !important; }

    .strong { 
        font: {
            style: var(--fontStyleStrong) !important;
            variant: var(--fontVariantStrong) !important;
            weight: var(--fontWeightStrong) !important;
        }
        text: {
            shadow: var(--textShadowStrong) !important;
            transform: var(--textTransformStrong) !important;
        }
    }
    
    .weak { 
        font: {
            style: var(--fontStyleWeak) !important;
            variant: var(--fontVariantWeak) !important;
            weight: var(--fontWeightWeak) !important;
        }
        text: {
            shadow: var(--textShadowWeak) !important;
            transform: var(--textTransformWeak) !important;
        }
    }

    .blur {
        transform: scale(75%) !important;
        // filter: blur(3px) opacity(0.75) !important;
        transform-origin: 0% 0% !important;
    }

    .glow {
        // filter: drop-shadow(0 0 5px var(--accentUp2)) drop-shadow(0 0 5px var(--accentUp2)) drop-shadow(0 0 5px var(--accentUp2));
    }

    .fader {
        opacity: 1;
        transition: 0.5s;
        &.fade25 { opacity: 0.75; }
        &.fade50 { opacity: 0.5; }
        &.fade75 { opacity: 0.25; }
        &.fade100 { opacity: 0; }
    }
    .width25 { width: 25%; }
    .height25 { height: 25%; }
    .width75 { width: 75%; }
    .height75 { width: 75%; }
    .widthAuto {width: auto; }
    .heightAuto {height: auto; }
    /* #endregion */

    /* #region System-Specific Styles */
    .skill {    
        @include box-shadow(3px, 3px, var(--greyDown2));
        width: 120px;
        border: 4px outset var(--white);
        text-align: center;
        text-align-last: center;
        background: {
            image: url('../images/textures/stoneWhite.jpg');
            repeat: no-repeat;
            size: 100%;
        }

        &.empty {
            @include box-shadow(3px, 3px, var(--grey), true);
            border: 4px inset var(--grey);
            background-image: url('../images/textures/stoneGrey.jpg');
            opacity: 0.75;
            // filter: blur(0.5px);
        }
    }
    /* #endregion */

    /* #region Buttons */
    div.closeButton {
        position: relative;
        z-index: 4;
        top: 38px;
        right: 28px;
        display: block;
        width: 36px;
        height: 36px;
        // line-height: 30px;
        border: 3px outset white;
        border-radius: 20px;
        margin-top: -36px;
        margin-bottom: -36px;
        background: rgba(0, 0, 0, 0.6);
        background-color: black;
        color: var(--white);
        cursor: pointer;
        float: right;
        font-size: 20px;
        pointer-events: all;
        text-align: center;
        text-align-last: center;
        transform: scale(0.8);
        
        &.collapsed {
            display: none !important;
        }
    }

    /* #endregion */

    /* #region Dragula Extension */
    .mirrorContainer {
        position: fixed !important;
        z-index: 9999999 !important;
        pointer-events: none !important;
        div.tipContents { display: none !important; }
    }
    /* #endregion */
    /* #region Popouts/Tooltips */
    div.tooltip,
    span.tooltip {
        position: relative;
        z-index: 9999;
        display: block;
        // filter: drop-shadow(5px 5px 10px black);

        &.helper {
            position: absolute;
            left: 30px;
            width: 40px;
            height: 40px;
            background-image: url('../images/ToolTipBall.png');
            background-position: center;
            background-size: 100%;
        }

        > div.tipContents {
            --tipWidth: 300px;
            $scaleFactor: 0.7;
            position: absolute;
            z-index: 99999999;
            width: var(--tipWidth);
            box-sizing: border-box;
            padding: 5px;
            border: 10px outset var(--greyUp3);
            border-radius: 8px;
            background-color: white;
            color: #444;
            font-size: 13px;
            font-weight: normal;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.8s;
            visibility: hidden;
            // filter: drop-shadow(5px 5px 5px rgba(0,0,0,0.75));
            > h3.tipTitle,
            h3:first-child.tipTitle {
                @include embossed-text(1px, 2px, var(--white), var(--black));
                width: calc((100% + 2 * 5px)/#{$scaleFactor});
                padding: 0;
                border: none;
                margin: -5px 0 0 -5px;
                background: $c-greyBG;
                color: black !important;
                font: {
                    family: Benguiat;
                    size: 20px;
                    style: normal;
                    variant: normal;
                    weight: bold;
                }
                text: {
                    align: center;
                    indent: 0;
                    transform: uppercase;
                }
                transform: scaleX(#{$scaleFactor});
                transform-origin: left;
            }

            p,
            li,
            span {
                // line-height: var(--lineHeightHeader);
                @include text-shadow((1 0 0 0 var(--black)));
                font-family: 'MercuryG2';
                font-size: 11px;

                &.stuntName {
                    text-shadow: 0 0 0 var(--black), 0 0 2px var(--black);
                    font: {
                        family: 'Benguiat';
                        size: 13px;
                        variant: small-caps;
                        weight: normal;
                    }
                }
                &.stuntCost { text-shadow: none; }
            }

            p { 
                margin: 5px 0;
                &:not(:first-of-type()) { text-indent: 15px; }
            }

            li { margin: 10px 0;
                text-indent: 0; }

            i {
                position: absolute;
                overflow: hidden;
                width: 50px;
                height: 50px;

                &::after {
                    position: absolute;
                    width: 50px;
                    height: 50px;
                    border: 10px outset #ddd;
                    background-color: white;
                    content: '';
                }
            }
        }
        &.hideTooltip > .tipContents { display: none !important; }

        &.skill > .tipContents { --tipWidth: 375px; }

        &.knack.immortal > .tipContents {
            border-color: $c-gold;
            i::after { border-color: $c-gold; }
            h3 { background: $c-goldBG; }
        }
        &.knack.generic > .tipContents h3 { background: $c-whiteBG; }

        &.tipLeft,
        &.tipRight {
            > .tipContents {
                top: 50%;
                transform: translate(0, -50%);

                i {
                    top: 50%;
                    margin-top: -25px;
                    &::after { top: 50%; }
                }
            }
        }

        &.tipRight > .tipContents {
            left: calc(100% + 5px + 10px);

            i { 
                right: 100%;
                &::after { transform: translate(50%, -50%) rotate(-45deg); }
            }
        }        

        &.tipLeft > .tipContents {
            right: calc(100% + 5px + 10px);

            i { 
                right: -50px;
                &::after { transform: translate(-50px, -50%) rotate(-45deg); }
            }
        }

        &.tipUpLeft,
        &.tipUp,
        &.tipUpRight {
            > .tipContents {
                bottom: 40px;
                transform: translate(-50%, 0%);

                i {
                    margin-top: -7px;
                    transform: scale(0.8);

                    &::after {
                        top: 50%;
                        transform: translate(-15%, -90%) rotate(45deg);
                    }
                }

            }
            &.immortal:not(.short) > .tipContents { bottom: 75px; }
        }

        &.tipUpLeft > .tipContents {
            left: 0%;
            i { left: calc(80% - 20px / 0.8); }
        }

        &.tipUp > .tipContents {
            left: 50%;
            i { left: calc(50% - 20px / 0.8); }
        }

        &.tipUpRight > .tipContents {
            left: 100%;
            i { left: calc(20% - 20px / 0.8); }
        }

        &:hover > .tipContents {
            opacity: 1;
            visibility: visible;
        }
    }

    .popout:not(.mirrorContainer) {
        position: absolute;
        z-index: 10;
        overflow: hidden;
        box-sizing: content-box;

        border: 10px outset var(--greyUp1);
        border-radius: 40px;
        
        background: {
            image: url('../images/textures/stoneGrey.jpg');
        }

        // filter: drop-shadow(0px 0px 6px black);
                 
    }

    .popout {        
        > div { padding: 15px; }
    }
    /* #endregion */ 

    /* #region Dot Trackers */
    .dot {    
        --dotSize: 16px;
        --dotBright: #444;
        --dotDark: #0a0a0a;
        display: block;
        width: var(--dotSize);
        height: var(--dotSize);
        padding: 0;
        border-radius: 50%;
        margin: 0;
        background: radial-gradient(var(--dotBright), var(--dotDark));
        box-shadow: 1px 1px 2px var(--dotDark);
    
        &[data-types*='general'] {
            --dotBright: #fff;
            --dotDark: #333;
        }

        &[data-types*='physical'],
        &[data-types*='mental'],
        &[data-types*='social'] {
            --dotBright: #999;
            --dotDark: #0a0a0a;
        }

        &[data-types*='unassigned'] {
            --scaleFactor: 0.5;

            &::after {
                
                display: block;
                width: calc(var(--dotSize) / var(--scaleFactor));
                min-width: calc(var(--dotSize) / var(--scaleFactor));
                max-width: calc(var(--dotSize) / var(--scaleFactor));
                height: var(--dotSize);
                margin-left: calc(-0.5 * var(--dotSize));
                color: var(--white);
                content: '';
                // line-height: var(--dotSize);
                font-family: 'Marcellus SC';
                font-size: var(--dotSize);
                font-weight: bold;
                text-align: center;
                text-align-last: center;
                text-shadow: var(--textShadowStrong);
                transform: scaleX(var(--scaleFactor));
            }
            &[data-types*='physical']::after { content: 'P'; }
            &[data-types*='social']::after { content: 'S'; }
            &[data-types*='mental']::after { content: 'M'; }
        }
    
        &[class*='-invalid'] {
            --dotBright: #900;
            --dotDark: #f00;
        }
    }

    [class~='dotline'] {
        $numDots: 5;
        --numDots: #{$numDots};
        --dotSize: 16px;
        --colGap: 0.1px;
        --dotContainerWidth: calc(var(--dotSize) * var(--numDots) + var(--colGap) * (var(--numDots) - 1));
        display: flex;
        // max-height: var(--dotSize);
        // min-height: var(--dotSize);
        width: 100%;
        height: var(--dotSize);
        align-items: center;
        justify-content: space-between;
        margin: 2px 0;
        flex: {
            direction: row;
            wrap: nowrap;
        }
        &.noLabel { width: var(--dotContainerWidth); }
        &.space5 { --colGap: 5px; }

        > .label {
            display: inline-block;
            height: var(--dotSize);
            // min-height: var(--dotSize);
            // max-height: var(--dotSize);
            flex-grow: 1;
            flex-shrink: 0;
            padding: 0;
            margin: 0;
            justify-self: flex-start;
            text-align: left;
            text-align-last: left;
        }

        > .dotContainer {
            --dotContainerWidth: calc(var(--dotSize) * var(--numDots) + var(--colGap) * (var(--numDots) - 1));
            @include repeat(var(--dotSize), 5, grid-template-columns, space);
            display: inline-grid;
            // max-height: var(--dotSize);
            // min-height: var(--dotSize);
            width: var(--dotContainerWidth);
            min-width: var(--dotContainerWidth);
            max-width: var(--dotContainerWidth);
            height: var(--dotSize);
            flex-grow: 0;
            flex-shrink: 0;
            grid-column-gap: var(--colGap);
            grid-template-rows: var(--dotSize);
            justify-self: flex-end;

            &.blanks {
                margin-right: calc(-1 * var(--dotContainerWidth));

                .dot {
                    --dotBright: transparent;
                    --dotDark: transparent;
                    box-shadow: inset 1px 1px 1px var(--blackFade60), inset -1px -1px 1px var(--white);
                }
            }
        }        

        &.dots10 { 
            --numDots: 10;
            --dotContainerWidth: calc(var(--dotSize) * var(--numDots) + var(--colGap) * (var(--numDots) - 1));
            > .dotContainer { @include repeat(var(--dotSize), 10, grid-template-columns, space) ;}
        }
    }
    /* #endregion */

    /* #region Bubbles */
    .bubble {    
        overflow: hidden;
        p {margin: 0;}
    }
    /* #endregion */

    /* #region Purview Display */
    [class|='purview'] {
        display: inline-block;
        width: 80px;
        height: 100px;
        filter: hue-rotate(var(--colorPurviewRotate));
        background: {
            position: center;
            repeat: no-repeat;
            size: 100%;
        };
        &[class*='sun'] { background-image: url('../images/purviews/sun.png'); }
        &[class*='passion'] { background-image: url('../images/purviews/passion.png'); }
        &[class*='geasa'] { background-image: url('../images/purviews/geasa.png'); }
        &[class*='beauty'] { background-image: url('../images/purviews/beauty.png'); }
        &[class*='fortune'] { background-image: url('../images/purviews/fortune.png'); }
        &[class*='metamorphosis'] { background-image: url('../images/purviews/metamorphosis.png'); }
        &[class*='prosperity'] { background-image: url('../images/purviews/prosperity.png'); }

        span.text {
            display: block;
            margin-top: 110%;
            margin-top: 95px;
            font-family: Oswald;
            font-size: 12px;
            text-align: center;
            text-transform: uppercase;
        }
    }
    /* #endregion */

    /* #region GRADIATED CLASSES */
    @for $i from 1 through 10 {
        .width#{$i * 10} { width: $i * 10%; }
        .height#{$i * 10} { height: $i * 10%; }
    }
    /* #endregion */
}
